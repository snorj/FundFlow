# =============================================================================
# Docker Compose Configuration for FundFlow
# Production-ready setup with Django + PostgreSQL + automatic migrations
# =============================================================================

services:
  # =============================================================================
  # PostgreSQL Database Service
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: fundflow-db
    restart: unless-stopped
    
    # Environment variables for PostgreSQL
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-fundflow_db}
      POSTGRES_USER: ${DATABASE_USER:-fundflow_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-fundflow_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    
    # Data persistence using named volume
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    # Expose PostgreSQL port for debugging (using alternative port to avoid conflicts)
    ports:
      - "5433:5432"
    
    # Health check to ensure PostgreSQL is ready
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-fundflow_user} -d ${DATABASE_NAME:-fundflow_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Resource limits for stability
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # =============================================================================
  # Django Web Application Service
  # =============================================================================
  web:
    image: ${DOCKER_IMAGE:-fundfl0w/fundflow:latest}
    container_name: fundflow-web
    restart: unless-stopped
    
    # Load environment variables from .env file
    env_file:
      - .env
    
    # Override database URL to use the internal Docker network
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-fundflow_user}:${DATABASE_PASSWORD:-fundflow_password}@db:5432/${DATABASE_NAME:-fundflow_db}
    
    # Port mapping defined in docker-compose.override.yml generated by fundflow.sh
    # ports:
    #   - "8000:8000"
    
    # Wait for database to be healthy before starting
    depends_on:
      db:
        condition: service_healthy
    
    # Health check for Django application
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    
    # Custom command: run migrations then start Gunicorn
    command: ["./startup.sh"]

# =============================================================================
# Named Volumes for Data Persistence
# =============================================================================
volumes:
  postgres_data:
    driver: local

# =============================================================================
# Network Configuration (optional - Docker creates default network)
# =============================================================================
networks:
  default:
    name: fundflow-network 