Here is frontend/src/components/plaid/PlaidLink.js:
import React, { useState, useCallback, useEffect, useRef } from 'react';
import { usePlaidLink } from 'react-plaid-link';
import plaidService from '../../services/plaid';
import './PlaidLink.css';

// Create a global script loader flag
let plaidScriptLoaded = false;

const PlaidLinkButton = ({ onSuccess, onExit, linkToken }) => {
  const config = {
    token: linkToken,
    onSuccess: (public_token, metadata) => {
      console.log('Link success:', metadata);
      onSuccess(public_token, metadata);
    },
    onExit: (err, metadata) => {
      console.log('Link exit:', err, metadata);
      if (onExit) onExit(err, metadata);
    },
  };

  const { open, ready } = usePlaidLink(config);

  return (
    <button 
      onClick={() => open()} 
      disabled={!ready} 
      className="plaid-link-button"
    >
      Connect a bank account
    </button>
  );
};

const PlaidLink = ({ onAccountConnected, className }) => {
  const [linkToken, setLinkToken] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const scriptLoadedInThisInstance = useRef(false);

  // Get a link token when the component mounts
  useEffect(() => {
    const getLinkToken = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const response = await plaidService.getLinkToken();
        setLinkToken(response.link_token);
      } catch (err) {
        console.error('Error getting link token:', err);
        setError('Failed to initialize bank connection. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };

    // Only load the Plaid script once across all instances
    if (!plaidScriptLoaded) {
      plaidScriptLoaded = true;
      scriptLoadedInThisInstance.current = true;
    }

    getLinkToken();

    // Cleanup
    return () => {
      // Only remove the script if this instance loaded it and component is unmounting
      if (scriptLoadedInThisInstance.current) {
        // Reset the flag if this component loaded the script and is being unmounted
        // This allows the script to be loaded again if needed
        plaidScriptLoaded = false;
      }
    };
  }, []);

  // Handle successful Plaid Link connection
  const handleSuccess = useCallback(async (public_token, metadata) => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Exchange the public token for an access token
      const exchangeResponse = await plaidService.exchangePublicToken(
        public_token,
        metadata.institution.institution_id,
        metadata.institution.name
      );
      
      console.log('Exchange success:', exchangeResponse);
      
      // Notify the parent component
      if (onAccountConnected) {
        onAccountConnected(exchangeResponse);
      }
    } catch (err) {
      console.error('Error exchanging token:', err);
      setError('Failed to complete bank connection. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  }, [onAccountConnected]);

  // Handle Plaid Link exit
  const handleExit = useCallback((err, metadata) => {
    if (err != null) {
      console.error('Link error:', err, metadata);
      setError('There was a problem connecting to your bank. Please try again.');
    }
  }, []);

  return (
    <div className={`plaid-link-container ${className || ''}`}>
      {error && <div className="plaid-link-error">{error}</div>}
      
      {isLoading ? (
        <div className="plaid-link-loading">
          <div className="spinner"></div>
          <span>Connecting to your bank...</span>
        </div>
      ) : (
        linkToken && <PlaidLinkButton 
          linkToken={linkToken} 
          onSuccess={handleSuccess} 
          onExit={handleExit} 
        />
      )}
    </div>
  );
};

export default PlaidLink;

Here is frontend/src/pages/Dashboard.js:
import React, { useState, useEffect, useCallback } from 'react';
import { Link } from 'react-router-dom';
import AccountSummary from '../components/dashboard/AccountSummary';
import SpendingChart from '../components/dashboard/SpendingChart';
import TransactionList from '../components/dashboard/TransactionList';
import PlaidLink from '../components/plaid/PlaidLink';
import plaidService from '../services/plaid';
import './Dashboard.css';

const Dashboard = () => {
  console.log('Dashboard component rendering!'); // Add this to check if the component is rendering
  
  const [accounts, setAccounts] = useState([]);
  const [transactions, setTransactions] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [accountLinkSuccess, setAccountLinkSuccess] = useState(null);

  const fetchData = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Fetch accounts
      const accountsData = await plaidService.getAccounts();
      setAccounts(accountsData);
      
      // Fetch recent transactions (last 30 days)
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(today.getDate() - 30);
      
      const transactionsData = await plaidService.getTransactions({
        start_date: thirtyDaysAgo.toISOString().split('T')[0],
        end_date: today.toISOString().split('T')[0],
      });
      
      setTransactions(transactionsData.results || []);
    } catch (err) {
      console.error('Error fetching dashboard data:', err);
      setError('Failed to load your financial data. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Handle successful account connection
  const handleAccountConnected = (response) => {
    setAccountLinkSuccess({
      message: `Successfully connected to ${response.institution_name}`,
      timestamp: new Date()
    });
    
    // Clear success message after 5 seconds
    setTimeout(() => {
      setAccountLinkSuccess(null);
    }, 5000);
    
    // Refresh data
    fetchData();
  };

  // Calculate total balances
  const calculateTotalBalance = () => {
    if (!accounts || accounts.length === 0) return 0;
    
    return accounts.reduce((total, account) => {
      // For deposit accounts, use available balance, or current balance if available balance is null
      if (account.account_type === 'depository') {
        return total + (account.available_balance !== null ? account.available_balance : account.current_balance || 0);
      }
      // For credit accounts, subtract the balance
      else if (account.account_type === 'credit') {
        return total - (account.current_balance || 0);
      }
      // For other types, just use current balance
      return total + (account.current_balance || 0);
    }, 0);
  };

  // Group transactions by category for chart
  const getCategoryData = () => {
    if (!transactions || transactions.length === 0) return [];
    
    const categories = {};
    
    transactions.forEach(transaction => {
      // Skip pending transactions and income (negative amounts in Plaid)
      if (transaction.pending || transaction.amount <= 0) return;
      
      const category = transaction.category_string || 'Uncategorized';
      
      if (!categories[category]) {
        categories[category] = 0;
      }
      
      categories[category] += transaction.amount;
    });
    
    // Convert to array and sort by amount
    return Object.entries(categories)
      .map(([name, amount]) => ({ name, amount }))
      .sort((a, b) => b.amount - a.amount);
  };

  return (
    <div className="dashboard-container">
      {isLoading ? (
        <div className="dashboard-loading">
          <div className="spinner-large"></div>
          <p>Loading your financial dashboard...</p>
        </div>
      ) : error ? (
        <div className="dashboard-error">
          <p>{error}</p>
          <button onClick={fetchData} className="retry-button">Try Again</button>
        </div>
      ) : (
        <>
          {accountLinkSuccess && (
            <div className="account-link-success">
              <span>{accountLinkSuccess.message}</span>
            </div>
          )}
          
          {accounts.length === 0 ? (
            <div className="no-accounts-container">
              <h2>Welcome to Fund Flow!</h2>
              <p>To get started, connect your bank accounts using Plaid's secure connection.</p>
              <div className="plaid-link-container-centered">
                <PlaidLink onAccountConnected={handleAccountConnected} />
              </div>
              <p className="plaid-security-note">
                <strong>Your security is our priority:</strong> Fund Flow uses Plaid's secure API to connect to your financial institutions. Your credentials are never stored on our servers.
              </p>
            </div>
          ) : (
            <>
              <div className="dashboard-header">
                <div className="welcome-section">
                  <h1 className="dashboard-title">Your Financial Overview</h1>
                  <p className="dashboard-subtitle">
                    Here's a snapshot of your finances as of {new Date().toLocaleDateString()}
                  </p>
                </div>
                <div className="dashboard-actions">
                  <PlaidLink 
                    onAccountConnected={handleAccountConnected} 
                    className="dashboard-plaid-link"
                  />
                </div>
              </div>
              
              <div className="dashboard-summary">
                <AccountSummary 
                  accounts={accounts}
                  totalBalance={calculateTotalBalance()}
                />
              </div>
              
              <div className="dashboard-content">
                <div className="dashboard-left">
                  <div className="dashboard-section">
                    <div className="section-header">
                      <h2 className="section-title">Recent Transactions</h2>
                      <Link to="/transactions" className="section-link">View All</Link>
                    </div>
                    <div className="section-content">
                      <TransactionList 
                        transactions={transactions.slice(0, 5)} 
                        isLoading={false}
                      />
                    </div>
                  </div>
                </div>
                
                <div className="dashboard-right">
                  <div className="dashboard-section">
                    <div className="section-header">
                      <h2 className="section-title">Spending by Category</h2>
                    </div>
                    <div className="section-content">
                      <SpendingChart data={getCategoryData()} />
                    </div>
                  </div>
                </div>
              </div>
            </>
          )}
        </>
      )}
    </div>
  );
};

export default Dashboard;

Here is frontend/src/App.js:
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './utils/AuthContext';
import PrivateRoute from './utils/PrivateRoute';
import Login from './pages/Login';
import Register from './pages/Register';
import Dashboard from './pages/Dashboard';
import MainLayout from './components/layout/MainLayout';
import Transactions from './pages/Transactions';
import Accounts from './pages/Accounts';

import './App.css';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          {/* Public routes */}
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          
          {/* Protected routes with MainLayout */}
          <Route element={<PrivateRoute />}>
            <Route element={<MainLayout />}>
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/transactions" element={<Transactions />} />
              <Route path="/accounts" element={<Accounts />} />
              {/* Add more routes as needed */}
            </Route>
          </Route>
          
          {/* Redirect root to dashboard or login depending on auth state */}
          <Route path="/" element={<Navigate to="/dashboard" replace />} />
          
          {/* Catch all - redirect to dashboard */}
          <Route path="*" element={<Navigate to="/dashboard" replace />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;


Here is services/plaid.js:
import api from './api';

/**
 * Service for handling Plaid-related API calls
 */
const plaidService = {
  /**
   * Get a link token to initialize Plaid Link
   * @returns {Promise} Promise with the link token
   */
  getLinkToken: async () => {
    try {
      const response = await api.get('/finance/link-token/');
      return response.data;
    } catch (error) {
      console.error('Error getting link token:', error);
      throw error;
    }
  },

  /**
   * Exchange a public token for an access token
   * @param {string} publicToken - The public token from Plaid Link
   * @param {string} institutionId - The ID of the financial institution
   * @param {string} institutionName - The name of the financial institution
   * @returns {Promise} Promise with the exchange response
   */
  exchangePublicToken: async (publicToken, institutionId, institutionName) => {
    try {
      const response = await api.post('/finance/exchange-token/', {
        public_token: publicToken,
        institution_id: institutionId,
        institution_name: institutionName
      });
      return response.data;
    } catch (error) {
      console.error('Error exchanging public token:', error);
      throw error;
    }
  },

  /**
   * Get all Plaid items (connected institutions) for the current user
   * @returns {Promise} Promise with the Plaid items
   */
  getPlaidItems: async () => {
    try {
      const response = await api.get('/finance/plaid-items/');
      return response.data;
    } catch (error) {
      console.error('Error getting Plaid items:', error);
      throw error;
    }
  },

  /**
   * Get all accounts for the current user
   * @returns {Promise} Promise with the accounts
   */
  getAccounts: async () => {
    try {
      const response = await api.get('/finance/accounts/');
      return response.data;
    } catch (error) {
      console.error('Error getting accounts:', error);
      throw error;
    }
  },

  /**
   * Fetch transactions for a specific Plaid item
   * @param {string} itemId - The ID of the Plaid item
   * @returns {Promise} Promise with the fetch response
   */
  fetchTransactions: async (itemId) => {
    try {
      const response = await api.post('/finance/fetch-transactions/', {
        item_id: itemId
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching transactions:', error);
      throw error;
    }
  },

  /**
   * Get transactions with optional filtering
   * @param {Object} filters - Optional filters (account_id, start_date, end_date, etc.)
   * @returns {Promise} Promise with the transactions
   */
  getTransactions: async (filters = {}) => {
    try {
      // Convert filters object to query string parameters
      const params = new URLSearchParams();
      Object.keys(filters).forEach(key => {
        if (filters[key] !== null && filters[key] !== undefined) {
          params.append(key, filters[key]);
        }
      });

      const response = await api.get(`/finance/transactions/?${params.toString()}`);
      return response.data;
    } catch (error) {
      console.error('Error getting transactions:', error);
      throw error;
    }
  }
};

export default plaidService;