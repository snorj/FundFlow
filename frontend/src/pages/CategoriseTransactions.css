.categorization-page {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .categorization-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 15px;
    border-bottom: 1px solid var(--gray-border);
  }
  
  .categorization-header h1 {
    font-size: 24px;
    font-weight: 600;
    color: var(--deep-navy);
    margin: 0;
  }
  
  .progress-indicator {
    font-size: 0.95em;
    font-weight: 500;
    color: var(--text-muted-dark);
    background-color: var(--light-gray);
    padding: 5px 10px;
    border-radius: 4px;
  }
  
  /* Loading and Error States */
  .categorization-page.loading-state,
  .categorization-page.error-state,
  .categorization-page.empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 60px 20px;
    min-height: 300px;
    color: var(--medium-blue);
  }
  
  .categorization-page .spinner {
    font-size: 2.5em;
    margin-bottom: 15px;
    animation: spin 1.5s linear infinite;
  }
  @keyframes spin { to { transform: rotate(360deg); } }
  
  .categorization-page.error-state svg,
  .categorization-page.empty-state svg {
      font-size: 3em;
      margin-bottom: 20px;
      color: var(--medium-blue);
  }
  .categorization-page.error-state svg {
      color: var(--warm-orange);
  }
  
  .categorization-page.error-state p,
  .categorization-page.empty-state p {
      font-size: 1.1em;
      margin-bottom: 25px;
  }
  .categorization-page.empty-state h2 {
      font-size: 1.5em;
      color: var(--deep-navy);
      margin-bottom: 10px;
  }
  
  .retry-button,
  .categorization-page.empty-state .action-button {
      padding: 10px 25px;
      font-weight: 600;
      border-radius: 5px;
      cursor: pointer;
      border: 1px solid var(--teal);
      background-color: var(--teal);
      color: var(--white);
      transition: background-color 0.2s;
  }
  .retry-button:hover,
  .categorization-page.empty-state .action-button:hover {
      background-color: var(--teal-darker);
      border-color: var(--teal-darker);
  }
  
  .categorization-error.error-message {
      background-color: var(--warm-orange-lighter);
      color: var(--warm-orange-darker);
      border: 1px solid var(--warm-orange);
      padding: 12px 15px;
      border-radius: 5px;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
      font-size: 14px;
  }
  
  /* --- Card Transition Styles --- */
  
  /* Container rendered by TransitionGroup */
  .categorization-card-container {
    position: relative; /* Establishes positioning context for children */
    min-height: 400px; /* Give it some minimum height to avoid collapse during transitions */
    /* Add overflow: hidden; if needed, but might clip shadows */
  }
  
  /* Base transition duration (must match timeout prop in CSSTransition) */
  .card-transition-enter,
  .card-transition-exit {
    transition: opacity 300ms ease-in-out, transform 300ms ease-in-out;
     /* Make cards absolute positioned during transition to allow overlap */
    position: absolute;
    top: 0;
    left: 0;
    width: 100%; /* Ensure it takes full width of container */
  }
  
  /* Entering card: Start state (invisible, slightly offset) */
  .card-transition-enter {
    opacity: 0;
    transform: scale(0.95) translateY(20px);
  }
  
  /* Entering card: End state (fully visible, normal position) */
  .card-transition-enter-active {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
  
  /* Exiting card: Start state (fully visible, normal position) */
  .card-transition-exit {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
  
  /* Exiting card: End state (invisible, slightly offset) */
  .card-transition-exit-active {
    opacity: 0;
    transform: scale(0.95) translateY(-20px);
  }
  
/* --- NEW: Description Editing Styles --- */
.card-header {
  display: flex;
  align-items: flex-start; /* Align items to top */
  justify-content: space-between;
  margin-bottom: 5px; /* Adjust spacing */
}

.card-header h3.card-description {
  flex-grow: 1; /* Allow description to take space */
  margin-bottom: 0; /* Remove margin from h3 */
  /* padding-right: 10px; Add padding if needed */
}

.edit-description-button {
  background: none;
  border: none;
  color: var(--text-muted-dark);
  cursor: pointer;
  padding: 5px;
  margin-left: 10px; /* Space from description */
  line-height: 0; /* Prevent extra height */
  border-radius: 4px;
  flex-shrink: 0; /* Prevent shrinking */
  transition: color 0.2s, background-color 0.2s;
}
.edit-description-button:hover {
  color: var(--teal);
  background-color: var(--light-gray);
}

.description-edit-input-area {
  display: flex;
  align-items: center;
  gap: 8px;
  flex-grow: 1; /* Take available space in header */
  margin-bottom: 0; /* Remove default h3 margin */
}

.description-edit-input-area input[type="text"] {
  flex-grow: 1;
  padding: 6px 10px;
  font-size: 1.1em; /* Match h3 size roughly */
  border: 1px solid var(--teal); /* Indicate editing */
  border-radius: 4px;
  font-weight: 600; /* Match h3 weight */
}

.description-edit-input-area button {
  background: none;
  border: none;
  padding: 5px;
  cursor: pointer;
  line-height: 0;
  color: var(--text-muted-dark);
  border-radius: 4px;
  transition: color 0.2s, background-color 0.2s;
  flex-shrink: 0;
}
.description-edit-input-area button:hover:not(:disabled) {
   background-color: var(--light-gray);
}
.description-edit-input-area button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
.description-edit-input-area button:first-of-type:hover:not(:disabled) { /* Save button */
  color: var(--teal);
}
.description-edit-input-area button:last-of-type:hover:not(:disabled) { /* Cancel button */
   color: var(--warm-orange-darker);
}