# Generated by Django 5.1.7 on 2025-06-22 15:03

from django.db import migrations, models


def remove_constraint_if_exists(apps, schema_editor):
    """
    Safely remove the valid_priority_range constraint if it exists.
    """
    with schema_editor.connection.cursor() as cursor:
        # Check if the constraint exists before trying to remove it
        cursor.execute("""
            SELECT constraint_name 
            FROM information_schema.table_constraints 
            WHERE table_name = 'transactions_vendorrule' 
            AND constraint_name = 'valid_priority_range'
            AND constraint_type = 'CHECK'
        """)
        if cursor.fetchone():
            cursor.execute("ALTER TABLE transactions_vendorrule DROP CONSTRAINT valid_priority_range")


def clean_duplicate_vendor_rules(apps, schema_editor):
    """
    Remove duplicate vendor rules, keeping only the newest rule for each vendor.
    This implements the 'newest-rule-wins' logic.
    """
    with schema_editor.connection.cursor() as cursor:
        # Find and delete duplicate rules, keeping only the most recent one for each vendor
        cursor.execute("""
            DELETE FROM transactions_vendorrule 
            WHERE id NOT IN (
                SELECT DISTINCT ON (vendor_id) id
                FROM transactions_vendorrule
                ORDER BY vendor_id, updated_at DESC
            )
        """)


def reverse_operations(apps, schema_editor):
    """
    Reverse function - we can't easily recreate the duplicates or constraints
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('transactions', '0016_auto_20250616_0738'),
    ]

    operations = [
        # First, safely remove the constraint using raw SQL
        migrations.RunPython(
            remove_constraint_if_exists,
            reverse_operations,
        ),
        
        # Clean up duplicate vendor rules before adding unique constraint
        migrations.RunPython(
            clean_duplicate_vendor_rules,
            reverse_operations,
        ),
        
        # Remove the pattern field from VendorRule
        migrations.RemoveField(
            model_name='vendorrule',
            name='pattern',
        ),
        
        # Remove the priority field from VendorRule  
        migrations.RemoveField(
            model_name='vendorrule',
            name='priority',
        ),
        
        # Remove the existing vendor-priority index (if it exists)
        migrations.RunSQL(
            "DROP INDEX IF EXISTS transaction_vendor__4551de_idx",
            reverse_sql="CREATE INDEX transaction_vendor__4551de_idx ON transactions_vendorrule (vendor_id, priority)"
        ),
        
        # Add unique constraint on vendor field
        migrations.AddConstraint(
            model_name='vendorrule',
            constraint=models.UniqueConstraint(
                fields=['vendor'],
                name='unique_vendor_rule'
            ),
        ),
    ]
