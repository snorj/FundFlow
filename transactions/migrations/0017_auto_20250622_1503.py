# Generated by Django 5.1.7 on 2025-06-22 15:03

from django.db import migrations, models


def remove_constraint_if_exists(apps, schema_editor):
    """
    Safely remove the valid_priority_range constraint if it exists.
    SQLite doesn't support CHECK constraints in the same way as PostgreSQL.
    """
    # For SQLite, we'll skip this operation as CHECK constraints are not supported
    # in the same way as PostgreSQL
    pass


def clean_duplicate_vendor_rules(apps, schema_editor):
    """
    Remove duplicate vendor rules, keeping only the newest rule for each vendor.
    This implements the 'newest-rule-wins' logic.
    """
    # For SQLite, we'll use a simpler approach since DISTINCT ON is not supported
    with schema_editor.connection.cursor() as cursor:
        # Get all vendor rules with their IDs and updated_at timestamps
        cursor.execute("""
            SELECT vendor_id, id, updated_at
            FROM transactions_vendorrule
            ORDER BY vendor_id, updated_at DESC
        """)
        
        # Group by vendor_id and keep only the first (most recent) for each vendor
        seen_vendors = set()
        ids_to_delete = []
        
        for row in cursor.fetchall():
            vendor_id, rule_id, updated_at = row
            if vendor_id not in seen_vendors:
                seen_vendors.add(vendor_id)
            else:
                ids_to_delete.append(rule_id)
        
        # Delete the duplicate rules
        if ids_to_delete:
            placeholders = ','.join(['?' for _ in ids_to_delete])
            cursor.execute(f"DELETE FROM transactions_vendorrule WHERE id IN ({placeholders})", ids_to_delete)


def reverse_operations(apps, schema_editor):
    """
    Reverse function - we can't easily recreate the duplicates or constraints
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('transactions', '0016_auto_20250616_0738'),
    ]

    operations = [
        # First, safely remove the constraint using raw SQL
        migrations.RunPython(
            remove_constraint_if_exists,
            reverse_operations,
        ),
        
        # Clean up duplicate vendor rules before adding unique constraint
        migrations.RunPython(
            clean_duplicate_vendor_rules,
            reverse_operations,
        ),
        
        # Remove the pattern field from VendorRule
        migrations.RemoveField(
            model_name='vendorrule',
            name='pattern',
        ),
        
        # Remove the priority field from VendorRule  
        migrations.RemoveField(
            model_name='vendorrule',
            name='priority',
        ),
        
        # Remove the existing vendor-priority index (if it exists)
        migrations.RunSQL(
            "DROP INDEX IF EXISTS transaction_vendor__4551de_idx",
            reverse_sql="CREATE INDEX transaction_vendor__4551de_idx ON transactions_vendorrule (vendor_id, priority)"
        ),
        
        # Add unique constraint on vendor field
        migrations.AddConstraint(
            model_name='vendorrule',
            constraint=models.UniqueConstraint(
                fields=['vendor'],
                name='unique_vendor_rule'
            ),
        ),
    ]
