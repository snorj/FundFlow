# Generated by Django 5.1.7 on 2025-06-16 07:38

import uuid
import re
from django.db import migrations, transaction


def migrate_description_mappings_to_vendor_rules(apps, schema_editor):
    """
    Migrate existing DescriptionMapping records to VendorRule records.
    
    For each DescriptionMapping:
    1. Find or create a Vendor based on clean_name
    2. Create a VendorRule with the original_description as pattern
    3. Set appropriate defaults for new fields
    """
    DescriptionMapping = apps.get_model('transactions', 'DescriptionMapping')
    VendorRule = apps.get_model('transactions', 'VendorRule')
    Vendor = apps.get_model('transactions', 'Vendor')
    
    mappings_processed = 0
    vendors_created = 0
    rules_created = 0
    skipped_mappings = 0
    
    print(f"\n=== Starting DescriptionMapping → VendorRule Migration ===")
    
    # Get all existing DescriptionMappings
    description_mappings = DescriptionMapping.objects.select_related('user', 'assigned_category').all()
    total_mappings = description_mappings.count()
    
    print(f"Found {total_mappings} DescriptionMapping records to process")
    
    if total_mappings == 0:
        print("No DescriptionMapping records found. Migration complete.")
        return
    
    for mapping in description_mappings:
        mappings_processed += 1
        
        try:
            with transaction.atomic():
                # Skip if no category assigned
                if not mapping.assigned_category:
                    print(f"  Skipping mapping '{mapping.clean_name}' - no category assigned")
                    skipped_mappings += 1
                    continue
                
                # Find or create Vendor based on clean_name
                vendor, vendor_created = Vendor.objects.get_or_create(
                    user=mapping.user,
                    name=mapping.clean_name,
                    defaults={
                        'display_name': mapping.clean_name,
                        'description_patterns': [mapping.original_description]
                    }
                )
                
                if vendor_created:
                    vendors_created += 1
                    print(f"  Created vendor: '{vendor.name}' for user {mapping.user.username}")
                else:
                    # Update existing vendor to include this description pattern
                    if mapping.original_description not in vendor.description_patterns:
                        vendor.description_patterns.append(mapping.original_description)
                        vendor.save(update_fields=['description_patterns', 'updated_at'])
                        print(f"  Updated vendor '{vendor.name}' with new pattern")
                
                # Create VendorRule
                # Use original_description as regex pattern (escape special regex chars for safety)
                escaped_pattern = re.escape(mapping.original_description)
                
                # Check if rule already exists (avoid duplicates)
                existing_rule = VendorRule.objects.filter(
                    vendor=vendor,
                    category=mapping.assigned_category,
                    pattern=escaped_pattern
                ).first()
                
                if existing_rule:
                    print(f"  VendorRule already exists for '{vendor.name}' → '{mapping.assigned_category.name}'")
                    continue
                
                # Create new VendorRule
                vendor_rule = VendorRule.objects.create(
                    id=str(uuid.uuid4()),
                    vendor=vendor,
                    category=mapping.assigned_category,
                    pattern=escaped_pattern,
                    is_persistent=True,  # Auto-apply to future transactions
                    priority=3,  # Medium priority
                )
                
                rules_created += 1
                print(f"  Created VendorRule: '{vendor.name}' → '{mapping.assigned_category.name}' (pattern: '{escaped_pattern[:50]}...')")
                
        except Exception as e:
            print(f"  ERROR processing mapping '{mapping.clean_name}': {str(e)}")
            skipped_mappings += 1
            continue
    
    print(f"\n=== Migration Summary ===")
    print(f"Total DescriptionMappings processed: {mappings_processed}")
    print(f"New Vendors created: {vendors_created}")
    print(f"New VendorRules created: {rules_created}")
    print(f"Mappings skipped: {skipped_mappings}")
    print(f"Migration completed successfully!")


def reverse_migration(apps, schema_editor):
    """
    Reverse migration - remove VendorRules that were created from DescriptionMappings.
    
    Note: This is a conservative reverse that only removes rules created during forward migration.
    We identify them by having escaped patterns that match DescriptionMapping original_descriptions.
    """
    DescriptionMapping = apps.get_model('transactions', 'DescriptionMapping')
    VendorRule = apps.get_model('transactions', 'VendorRule')
    
    rules_deleted = 0
    
    print(f"\n=== Reversing DescriptionMapping → VendorRule Migration ===")
    
    # Get all DescriptionMappings to identify patterns that were migrated
    description_mappings = DescriptionMapping.objects.all()
    migrated_patterns = set()
    
    for mapping in description_mappings:
        escaped_pattern = re.escape(mapping.original_description)
        migrated_patterns.add(escaped_pattern)
    
    print(f"Found {len(migrated_patterns)} patterns to reverse")
    
    # Delete VendorRules with these patterns
    for pattern in migrated_patterns:
        deleted_count = VendorRule.objects.filter(pattern=pattern).delete()[0]
        rules_deleted += deleted_count
    
    print(f"Deleted {rules_deleted} VendorRules during reverse migration")
    print(f"Reverse migration completed!")


class Migration(migrations.Migration):

    dependencies = [
        ('transactions', '0015_add_performance_indexes_and_validation_constraints'),
    ]

    operations = [
        migrations.RunPython(
            migrate_description_mappings_to_vendor_rules,
            reverse_migration,
            elidable=True,
        ),
    ]
